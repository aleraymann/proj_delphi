unit cProVenda;

interface

uses  System.Classes,
      Vcl.Controls,
      Vcl.ExtCtrls,
      Vcl.Dialogs,
      System.SysUtils,
      ZAbstractConnection,
      ZConnection,
      ZAbstractRODataset, ZAbstractDataset, ZDataset, Data.DB, Datasnap.DBClient;

     type
  TVenda = class //declaracao de classe
  private
      //variaveis privadas pra essa classe
    ConexaoDB:TZConnection;
    F_vendaId:Integer;
		F_clienteId:Integer;
		F_dataVenda:TDateTime;
		F_totalVenda:Double;
    IdVendaGerado:Integer;
    function ApagaItens(cds: TClientDataSet): Boolean;
    function InNot(cds: TClientDataSet): String;
    function EsteItemExiste(vendaId, produtoId: Integer): boolean;
    function AtualizaItem(cds: TClientDataSet): boolean;

  public
     //variaveis publicas
      constructor Create(aConexao:TZConnection); //construtor da classe
      destructor Destroy; override; //destroi a classe, sobrescrever
      function Inserir(cds:TClientDataSet):Boolean;
      function Atualizar(cds:TClientDataSet):Boolean;
      function Apagar:Boolean;
      function Selecionar(id:Integer; var cds:TClientDataSet):Boolean;
      function InserirItens(cds:TClientDataSet; IdVenda:Integer):Boolean;



  published
      //variaveis publicas para propriedades da classe
      //fornecer informacoes em runtime
      property vendaId:Integer                  read  F_vendaId              write F_vendaId;
      property clienteId:Integer                read  F_clienteId            write F_clienteId;
      property dataVenda:TDateTime              read  F_dataVenda            write F_dataVenda;
      property totalVenda:Double                read  F_totalVenda           write F_totalVenda;

  end;

implementation

{$region 'contructor e desctructor'}
constructor TVenda.Create(aConexao:TZConnection);
begin
      ConexaoDB:=aConexao;
end;

destructor TVenda.Destroy;
begin
  inherited;
end;
{$endregion}

{$region 'cruds'}
function TVenda.Apagar: Boolean;
var Qry:TZQuery;
begin
if MessageDlg('Apagar o Registro: '+#13+#13+
                'Código: '+IntToStr(F_vendaId)+#13+
                'Venda Nro: '+ IntToStr(vendaId),mtConfirmation,[mbYes, mbNo],0)=mrNo then begin
     Result:=false;
     abort;
  end;

  try
    Result:=true;

    Qry:=TZQuery.Create(nil);
    Qry.Connection:=ConexaoDB;
    Qry.SQL.Clear;
    //apaga itens
    Qry.SQL.Add('DELETE FROM vendasItens '+
                ' WHERE vendaId=:vendaId ');
    Qry.ParamByName('vendaId').AsInteger :=vendaId;
    Try
     Qry.ExecSQL;
     //apaga da tabela vendas
     Qry.SQL.Add('DELETE FROM vendas '+
                ' WHERE vendaId=:vendaId ');
      Qry.ParamByName('vendaId').AsInteger :=vendaId;
       Qry.ExecSQL;

    Except

      Result:=false;
    End;

  finally
    if Assigned(Qry) then
       FreeAndNil(Qry);
  end;
end;

function TVenda.Atualizar(cds:TClientDataSet): Boolean;
    var Qry:TZQuery;
begin
  try
    Result:=true;
    ConexaoDB.StartTransaction;
    Qry:=TZQuery.Create(nil);
    Qry.Connection:=ConexaoDB;
    Qry.SQL.Clear;
    Qry.SQL.Add('UPDATE vendas '+
                ' SET clienteId=:clienteId '+
                '     ,dataVenda=:dataVenda '+
                '     ,totalVenda=:totalVenda '+
                ' WHERE vendaId=:vendaId ');
    Qry.ParamByName('vendaId').AsInteger:= Self.F_vendaId;
    Qry.ParamByName('clienteId').AsInteger:= Self.clienteId;
    Qry.ParamByName('dataVenda').AsDateTime:= Self.F_dataVenda;
    Qry.ParamByName('totalVenda').AsFloat:= Self.F_totalVenda;

    Try
    //update venda
      Qry.ExecSQL;

    // apaga do banco itens apagados da tela
    ApagaItens(cds);

    cds.First;
    while not cds.Eof do begin
     if EsteItemExiste(self.F_vendaId, cds.FieldByName('produtoId').AsInteger) then  begin
       //update
       AtualizaItem(cds);

     end else begin
       //insert
       InserirItens(cds, self.F_vendaId);
     end;

    cds.Next;
    end;


    Except
      Result:=false;
      COnexaoDB.Rollback;
    End;
    ConexaoDB.Commit;
  finally
    if Assigned(Qry) then
       FreeAndNil(Qry);
  end;
end;

function Tvenda.AtualizaItem(cds:TClientDataSet):boolean;
var Qry:TZQuery;
begin
try
   Result:=true;
    Qry:=TZQuery.Create(nil);
    Qry.Connection:=ConexaoDB;
    Qry.SQL.Clear;
    Qry.SQL.Add('UPDATE vendasItens '+
                ' SET valorUnitario=:valorUnitario '+
                '     ,quantidade=:quantidade '+
                '     ,totalProduto=:totalProduto '+
                ' WHERE vendaId=:vendaId AND produtoId=:produtoId ');
    Qry.ParamByName('vendaId').AsInteger:= Self.F_vendaId;
    Qry.ParamByName('produtoId').AsInteger:= cds.FieldByName('produtoId').AsInteger;
    Qry.ParamByName('valorUnitario').AsFloat:= cds.FieldByName('valorUnitario').AsFloat;
    Qry.ParamByName('quantidade').AsFloat:= cds.FieldByName('quantidade').AsFloat;
    Qry.ParamByName('totalProduto').AsFloat:= cds.FieldByName('totalProduto').AsFloat;

    Try
      Qry.ExecSQL;
    Except
      Result:=false;
    End;

  finally
    if Assigned(Qry) then
       FreeAndNil(Qry);
  end;

end;

function TVenda.EsteItemExiste(vendaId: integer; produtoId: Integer):boolean;
var Qry:TZQuery;
begin

  try
    Qry:=TZQuery.Create(nil);
    Qry.Connection:=ConexaoDB;
    Qry.SQL.Clear;
    Qry.SQL.Add(' select Count(vendaId) as Qtde ' +
                ' from vendasItens '+
                ' where vendaId=:vendaId and produtoId=:produtoId ');

    Qry.ParamByName('vendaId').AsInteger :=vendaId;
    Qry.ParamByName('produtoId').AsInteger :=produtoId;

    Try
      Qry.Open;

      if Qry.FieldByName('Qtde').AsInteger>0 then
          Result:=true
      else
          Result:= false;
    Finally

    End;
  finally

  end;
end;
function TVenda.ApagaItens(cds:TClientDataSet):Boolean;
var Qry:TzQuery;
begin
try
  Result:=true;
  Qry:=TzQuery.Create(nil);
  Qry.Connection:=ConexaoDB;
  Qry.SQL.Add(' delete '+
              ' from vendasItens '+
              ' where vendasId=:vendaId '+
              ' and produtoId not in ('+ InNot(cds)+') ');
   Qry.ParamByName('vendaId').AsInteger := self.F_vendaId;

   try
     qry.ExecSQL;
   except
     Result:=false;
   end;

finally
   if Assigned(Qry) then
      FreeAndNil(Qry);
   end;
end;

function TVenda.InNot(cds:TClientDataSet): String;
var sInNot:String;
begin
  sInNot:=EmptyStr;
  cds.First;

  while not cds.Eof do begin
    if sInNot=EmptyStr then
      sInNot :=cds.FieldByName('produtoId').AsString
    else
    sInNot := sInNot + ',' +cds.FieldByName('produtoId').AsString;

    cds.Next;
  end;
   Result := sInNot;
end;


function TVenda.Inserir(cds:TClientDataSet): Boolean;
   var Qry:TZQuery;
begin
  try
    Result:=true;

    Qry:=TZQuery.Create(nil);
    Qry.Connection:=ConexaoDB;
    Qry.SQL.Clear;
    //inclui no banco
    Qry.SQL.Add('INSERT INTO vendas (clienteId, '+
                                       'dataVenda, '+
                                       'totalVenda) '+
                        'VALUES        (:clienteId, '+
                                       ':dataVenda, '+
                                       ':totalVenda)');
    Qry.ParamByName('clienteId').AsInteger:= Self.F_clienteId;
    Qry.ParamByName('dataVenda').AsDateTime:= Self.F_dataVenda;
    Qry.ParamByName('totalVenda').AsFloat:= Self.F_totalVenda;


    Try
      Qry.ExecSQL;
      //recupera o id gerado no insert
      Qry.SQL.Clear;
      Qry.SQL.Add('SELECT SCOPE_IDENTITY() as ID');
      Qry.Open;

      //id da tabela master(vendas)
      IdVendaGerado :=Qry.FieldByName('ID').AsInteger;
      //gravar nta tabela
       cds.First;
       while not cds.Eof do begin
       InserirItens(cds,IdVendaGerado);

       cds.Next;
       end;


    Except

      Result:=false;
    End;

  finally
    if Assigned(Qry) then
       FreeAndNil(Qry);
  end;
end;

function TVenda.InserirItens(cds:TClientDataSet; IdVenda:Integer):Boolean;
    var Qry:TZQuery;
begin
  try
    Result:=true;
    Qry:=TZQuery.Create(nil);
    Qry.Connection:=ConexaoDB;
    Qry.SQL.Clear;
    //inclui no banco
    Qry.SQL.Add('INSERT INTO vendasItens (vendaId, '+
                                       'produtoId, '+
                                       'valorUnitario, '+
                                       'quantidade, '+
                                       'totalProduto) '+
                        'VALUES        (:vendaId, '+
                                       ':produtoId, '+
                                       ':valorUnitario, '+
                                       ':quantidade, '+
                                       ':totalProduto) ');
    Qry.ParamByName('vendaId').AsInteger:= IdVenda;
    Qry.ParamByName('produtoId').AsInteger:= cds.FieldByName('produtoId').AsInteger;
    Qry.ParamByName('valorUnitario').AsFloat:= cds.FieldByName('valorUnitario').AsFloat;
    Qry.ParamByName('quantidade').AsFloat:= cds.FieldByName('quantidade').AsFloat;
    Qry.ParamByName('totalProduto').AsFloat:= cds.FieldByName('totalProduto').AsFloat;

    Try
      Qry.ExecSQL;
    Except
      Result:=false;
    End;
  finally

    if Assigned(Qry) then
       FreeAndNil(Qry);
  end;
  end;


function TVenda.Selecionar(id: Integer; var cds:TClientDataSet ): Boolean;
var Qry:TZQuery;
begin
  try
    Result:=true;
    Qry:=TZQuery.Create(nil);
    Qry.Connection:=ConexaoDB;
    Qry.SQL.Clear;
    Qry.SQL.Add('SELECT vendaId, '+
                '       clienteId, '+
                 '       dataVenda, '+
                  '       totalVenda, '+
                '  FROM vendas '+
                ' WHERE vendaId=:vendaId ');

    Qry.ParamByName('vendaId').AsInteger:=id;
    Try
      Qry.Open;

      Self.F_vendaId      := Qry.FieldByName('vendaId').AsInteger;
      Self.F_clienteId            := Qry.FieldByName('clienteId').AsInteger;
      Self.F_dataVenda       := Qry.FieldByName('dataVenda').AsDateTime;
      Self.F_totalVenda          := Qry.FieldByName('totalVenda').AsFloat;

      cds.First;
      while not cds.Eof do begin
      cds.Delete;
      end;

      Qry.Close;
      Qry.SQL.Clear;
      Qry.SQL.Add('SELECT vendasItens.produtoId, '+
                '       produtos.nome, '+
                 '       vendasItens.valorUnitario, '+
                  '       vendasItens.quatidade, '+
                   '       vendasItens.totalProduto, '+
                '  FROM vendasItens '+
                '  INNER JOIN produtos on produtos.produtoId = vendasItens.produtoId '+
                ' WHERE vendasItens.vendaId=:vendaId ');

        Qry.ParamByName('vendaId').AsInteger:=Self.F_vendaId;
        Qry.Open;

        //insere no cds
        Qry.First;

        while not Qry.Eof do begin
        cds.Append;
        cds.FieldByName('produtoId').AsInteger := Qry.FieldByName('produtoId').AsInteger;
        cds.FieldByName('nomeProduto').asString := Qry.FieldByName('nome').AsString;
        cds.FieldByName('valorUnitario').asFloat := Qry.FieldByName('valorUnitario').AsFloat;
        cds.FieldByName('quantidade').AsFloat := Qry.FieldByName('quantidade').AsFloat;
        cds.FieldByName('valorTotalProduto').AsFloat := Qry.FieldByName('valorTotalProduto').AsFloat;
        cds.Post;
        Qry.Next;
        end;
        Qry.First;




    Except
      Result:=false;
    End;

  finally
    if Assigned(Qry) then
       FreeAndNil(Qry);
  end;
end;
 {$endregion}



end.
